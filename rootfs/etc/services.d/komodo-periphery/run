#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: Komodo Periphery
# Runs the Komodo Periphery agent
# ==============================================================================

# Wait for services to become available
bashio::net.wait_for 443

bashio::log.info "Starting Komodo Periphery..."

# Read configuration from add-on options
KOMODO_ADDRESS=$(bashio::config 'komodo_address')
KOMODO_API_KEY=$(bashio::config 'komodo_api_key')
KOMODO_API_SECRET=$(bashio::config 'komodo_api_secret')
LOG_LEVEL=$(bashio::config 'log_level')
STATS_POLLING_RATE=$(bashio::config 'stats_polling_rate')
CONTAINER_STATS_POLLING_RATE=$(bashio::config 'container_stats_polling_rate')
SSL_ENABLED=$(bashio::config 'ssl_enabled')
MONITOR_HOMEASSISTANT=$(bashio::config 'monitor_homeassistant')

# Validate required configuration
if bashio::var.is_empty "${KOMODO_ADDRESS}"; then
    bashio::log.fatal "Komodo server address is required!"
    bashio::exit.nok
fi

if bashio::var.is_empty "${KOMODO_API_KEY}"; then
    bashio::log.fatal "Komodo API key is required!"
    bashio::exit.nok
fi

if bashio::var.is_empty "${KOMODO_API_SECRET}"; then
    bashio::log.fatal "Komodo API secret is required!"
    bashio::exit.nok
fi

# Export environment variables for Komodo client
export KOMODO_ADDRESS="${KOMODO_ADDRESS}"
export KOMODO_API_KEY="${KOMODO_API_KEY}"
export KOMODO_API_SECRET="${KOMODO_API_SECRET}"

# Set up configuration directory
CONFIG_DIR="/data/config"
mkdir -p "${CONFIG_DIR}"

# Generate Periphery configuration file
bashio::log.info "Generating Periphery configuration..."

cat > "${CONFIG_DIR}/periphery.config.toml" <<EOF
# Komodo Periphery Configuration
# Generated by Home Assistant Add-on

[logging]
level = "${LOG_LEVEL}"
pretty = false

## System stats polling configuration
stats_polling_rate = "${STATS_POLLING_RATE}"
container_stats_polling_rate = "${CONTAINER_STATS_POLLING_RATE}"

## SSL Configuration
ssl_enabled = ${SSL_ENABLED}
ssl_key_file = "/data/ssl/key.pem"
ssl_cert_file = "/data/ssl/cert.pem"

## Security Configuration
EOF

# Add optional security configurations if provided
if bashio::config.has_value 'allowed_ips'; then
    ALLOWED_IPS=$(bashio::config 'allowed_ips | join(", ")')
    echo "allowed_ips = [${ALLOWED_IPS}]" >> "${CONFIG_DIR}/periphery.config.toml"
fi

if bashio::config.has_value 'passkeys'; then
    PASSKEYS=$(bashio::config 'passkeys | join(", ")')
    echo "passkeys = [${PASSKEYS}]" >> "${CONFIG_DIR}/periphery.config.toml"
fi

# Generate SSL certificates if they don't exist and SSL is enabled
if bashio::var.true "${SSL_ENABLED}"; then
    SSL_DIR="/data/ssl"
    mkdir -p "${SSL_DIR}"
    
    if [[ ! -f "${SSL_DIR}/cert.pem" ]] || [[ ! -f "${SSL_DIR}/key.pem" ]]; then
        bashio::log.info "Generating self-signed SSL certificates..."
        openssl req -x509 -newkey rsa:4096 -keyout "${SSL_DIR}/key.pem" \
            -out "${SSL_DIR}/cert.pem" -days 365 -nodes \
            -subj "/C=US/ST=Home/L=Assistant/O=Komodo/CN=periphery"
        
        chown komodo:komodo "${SSL_DIR}/key.pem" "${SSL_DIR}/cert.pem"
        chmod 600 "${SSL_DIR}/key.pem"
        chmod 644 "${SSL_DIR}/cert.pem"
    fi
fi

# Set proper permissions
chown -R komodo:komodo "${CONFIG_DIR}"

# Check if Home Assistant monitoring is enabled
if bashio::var.true "${MONITOR_HOMEASSISTANT}"; then
    bashio::log.info "Home Assistant monitoring enabled"
    # Add Home Assistant specific monitoring logic here if needed
fi

bashio::log.info "Starting Komodo Periphery with config: ${CONFIG_DIR}/periphery.config.toml"

# Start Periphery as komodo user
exec s6-setuidgid komodo periphery \
    --config-path "${CONFIG_DIR}/periphery.config.toml" \
    --merge-nested-config true